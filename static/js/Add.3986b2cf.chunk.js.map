{"version":3,"file":"static/js/Add.3986b2cf.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","views/Add.jsx","views/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"edit\":\"ContactForm_edit__pQ0uo ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"labelEdit\":\"ContactForm_labelEdit__x6dts ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"inputEdit\":\"ContactForm_inputEdit__oTXNa ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  useAddContactMutation,\n  useFetchContactsQuery,\n  useUpdateContactMutation,\n} from \"redux/contacts\";\nimport s from \"./ContactForm.module.css\";\nimport Button from \"components/Button\";\n\nfunction ContactForm({\n  type,\n  id,\n  initialName = \"\",\n  initialNumber = \"\",\n  setEdit,\n}) {\n  const [name, setName] = useState(initialName);\n  const [number, setNumber] = useState(initialNumber);\n  const navigate = useNavigate();\n  const { data } = useFetchContactsQuery();\n  const names = data?.map((contact) => contact.name);\n  const [addContact] = useAddContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n  const handleInputChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        return;\n      case \"number\":\n        setNumber(value);\n        return;\n      default:\n        return;\n    }\n  };\n  const onAddContact = async (name, number) => {\n    if (names.includes(name)) {\n      toast.error(`${name} is already in contacts!`);\n      return;\n    }\n    const data = await addContact({ name, number }).unwrap();\n    if (data.id) {\n      toast.success(`${name} was added to contacts`);\n      navigate(\"/contacts\");\n    }\n    if (data.message)\n      toast.error(`Can't add ${name} to contacts, please try again`);\n  };\n  const onEditContact = async (name, number) => {\n    const data = await updateContact({ id, name, number }).unwrap();\n    if (data.id) {\n      toast.success(`${name} was successfully updated`);\n      navigate(\"/contacts\");\n    }\n    if (data.message) toast.error(`Can't update ${name}, please try again`);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    if (type === \"Add\") onAddContact(name, number);\n    if (type === \"Edit\") onEditContact(name, number);\n  };\n\n  return (\n    <form className={type === \"Add\" ? s.form : s.edit} onSubmit={handleSubmit}>\n      <label className={type === \"Add\" ? s.label : s.labelEdit}>\n        Name\n        <input\n          className={type === \"Add\" ? s.input : s.inputEdit}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\" \"\n          required\n          value={name}\n          onInput={handleInputChange}\n        />\n      </label>\n      <label className={type === \"Add\" ? s.label : s.labelEdit}>\n        Number\n        <input\n          className={type === \"Add\" ? s.input : s.inputEdit}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\" \"\n          required\n          value={number}\n          onInput={handleInputChange}\n        />\n      </label>\n      <span>\n        <button className={s.btn} type=\"submit\">\n          Save\n        </button>\n        {type === \"Edit\" && (\n          <Button text=\"Cancel\" onClick={() => setEdit(false)} />\n        )}\n      </span>\n    </form>\n  );\n}\nContactForm.propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  initialName: PropTypes.string,\n  initialNumber: PropTypes.string,\n  setEdit: PropTypes.func,\n};\nexport default ContactForm;\n","import ContactForm from \"components/ContactForm\";\n\nfunction Add() {\n  return <ContactForm type=\"Add\" />;\n}\n\nexport default Add;\n","import { Fragment } from \"react\";\nimport GoogleButton from \"components/GoogleButton\";\nimport AuthForm from \"components/AuthForm\";\n\nfunction Register() {\n  return (\n    <Fragment>\n      <GoogleButton type=\"Signup\" />\n      <AuthForm type=\"Signup\" />\n    </Fragment>\n  );\n}\n\nexport default Register;\n"],"names":["type","id","initialName","initialNumber","setEdit","useState","name","setName","number","setNumber","navigate","useNavigate","data","useFetchContactsQuery","names","map","contact","useAddContactMutation","addContact","useUpdateContactMutation","updateContact","handleInputChange","e","target","value","onAddContact","includes","toast","unwrap","message","onEditContact","handleSubmit","preventDefault","className","s","onSubmit","pattern","title","placeholder","required","onInput","Button","text","onClick","Fragment"],"sourceRoot":""}